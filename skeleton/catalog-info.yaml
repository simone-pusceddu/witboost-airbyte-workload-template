%SKELETON
{% set dataProductMajorVersion = values.identifier.split(".")[2] %}

apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: ${{ values.identifier }}
  description: ${{ values.description | dump }}
  annotations:
    gitlab.com/project-slug: 'AgileDMBSandbox/${{orgname}}/mesh.repository/${{ values.domain | replace(r/domain:| |-/, "") }}/${{ values.dataproduct.split(".")[1] | replace(r/ |-/g, "") }}/${{ values.name.split(" ") | join("") | lower }}'
    backstage.io/techdocs-ref: dir:.
  tags:
    - snowflake
    - airbyte
    - workload
spec:
  type: workload
  lifecycle: experimental
  owner: ${{ values.developmentGroup | dump }}
  system: ${{ values.dataproduct | dump }}
  domain: ${{ values.domain | dump }}
  mesh:
    name: ${{ values.name | dump }}
    fullyQualifiedName: ${{ values.domainName }} - ${{ values.dataproductName }} - version ${{ dataProductMajorVersion }} - ${{ values.name }}
    description: ${{ values.description | dump }}
    kind: workload
    version: ${{ values.identifier.split(".")[2] + ".0.0" }}
    infrastructureTemplateId: ${{ values.infrastructureTemplateId }}
    useCaseTemplateId: ${{ values.useCaseTemplateId }}
    dependsOn: {% if values.dependsOn | length > 0 %}{% for i in values.dependsOn %}
      - ${{ i }}{% endfor %}{% else %}[]{% endif %}
    platform: Snowflake
    technology: airbyte
    workloadType: batch
    connectionType: DataPipeline
    tags: []
    readsFrom: {% if values.readsFrom | length > 0 %}{% for i in values.readsFrom %}
      - ${{ i }}{% endfor %}{% else %}[]{% endif %}
    specific:
      source:
        name: ${{ values.identifier.split(".").slice(0, 3).join(".") }}.${{ values.sourceName }}
        connectionConfiguration:
          url: ${{ values.url }}
          format: ${{ values.format }}
          provider:
            storage: ${{ values.storage }}
            user_agent: ${{ values.user_agent }}
          dataset_name: ${{ values.dataset_name }}
      destination:
        name: ${{ values.identifier.split(".").slice(0, 3).join(".") }}.${{ values.destinationName }}
        connectionConfiguration:
          database: ${{ values.database | default(values.domain, true) | replace(r/domain:| |-/, "") | upper | dump }}
          schema: ${{ (values.schema | default(values.dataproduct.split(".")[1], true) | replace(r/ |-/g, "") + "_" + values.identifier.split(".")[2]) | upper | dump }}
      connection:
        name: ${{ values.identifier.split(".").slice(0, 3).join(".") }}.${{ values.connectionName }}
